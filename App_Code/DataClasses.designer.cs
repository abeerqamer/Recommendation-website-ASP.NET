#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="recom")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAnswer123(Answer123 instance);
  partial void UpdateAnswer123(Answer123 instance);
  partial void DeleteAnswer123(Answer123 instance);
  partial void InsertLog(Log instance);
  partial void UpdateLog(Log instance);
  partial void DeleteLog(Log instance);
  partial void InsertQuestion(Question instance);
  partial void UpdateQuestion(Question instance);
  partial void DeleteQuestion(Question instance);
  partial void InsertUpVote(UpVote instance);
  partial void UpdateUpVote(UpVote instance);
  partial void DeleteUpVote(UpVote instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["recomConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Answer123> Answer123s
	{
		get
		{
			return this.GetTable<Answer123>();
		}
	}
	
	public System.Data.Linq.Table<Log> Logs
	{
		get
		{
			return this.GetTable<Log>();
		}
	}
	
	public System.Data.Linq.Table<Question> Questions
	{
		get
		{
			return this.GetTable<Question>();
		}
	}
	
	public System.Data.Linq.Table<UpVote> UpVotes
	{
		get
		{
			return this.GetTable<UpVote>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answer123")]
public partial class Answer123 : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AId;
	
	private string _Answer;
	
	private System.Nullable<System.DateTime> _ATime;
	
	private System.Nullable<int> _QId;
	
	private System.Nullable<int> _LId;
	
	private EntityRef<Log> _Log;
	
	private EntityRef<Question> _Question;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAIdChanging(int value);
    partial void OnAIdChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnATimeChanging(System.Nullable<System.DateTime> value);
    partial void OnATimeChanged();
    partial void OnQIdChanging(System.Nullable<int> value);
    partial void OnQIdChanged();
    partial void OnLIdChanging(System.Nullable<int> value);
    partial void OnLIdChanged();
    #endregion
	
	public Answer123()
	{
		this._Log = default(EntityRef<Log>);
		this._Question = default(EntityRef<Question>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AId
	{
		get
		{
			return this._AId;
		}
		set
		{
			if ((this._AId != value))
			{
				this.OnAIdChanging(value);
				this.SendPropertyChanging();
				this._AId = value;
				this.SendPropertyChanged("AId");
				this.OnAIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(200)")]
	public string Answer
	{
		get
		{
			return this._Answer;
		}
		set
		{
			if ((this._Answer != value))
			{
				this.OnAnswerChanging(value);
				this.SendPropertyChanging();
				this._Answer = value;
				this.SendPropertyChanged("Answer");
				this.OnAnswerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ATime", DbType="DateTime")]
	public System.Nullable<System.DateTime> ATime
	{
		get
		{
			return this._ATime;
		}
		set
		{
			if ((this._ATime != value))
			{
				this.OnATimeChanging(value);
				this.SendPropertyChanging();
				this._ATime = value;
				this.SendPropertyChanged("ATime");
				this.OnATimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QId", DbType="Int")]
	public System.Nullable<int> QId
	{
		get
		{
			return this._QId;
		}
		set
		{
			if ((this._QId != value))
			{
				if (this._Question.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnQIdChanging(value);
				this.SendPropertyChanging();
				this._QId = value;
				this.SendPropertyChanged("QId");
				this.OnQIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LId", DbType="Int")]
	public System.Nullable<int> LId
	{
		get
		{
			return this._LId;
		}
		set
		{
			if ((this._LId != value))
			{
				if (this._Log.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLIdChanging(value);
				this.SendPropertyChanging();
				this._LId = value;
				this.SendPropertyChanged("LId");
				this.OnLIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_Answer123", Storage="_Log", ThisKey="LId", OtherKey="LID", IsForeignKey=true)]
	public Log Log
	{
		get
		{
			return this._Log.Entity;
		}
		set
		{
			Log previousValue = this._Log.Entity;
			if (((previousValue != value) 
						|| (this._Log.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Log.Entity = null;
					previousValue.Answer123s.Remove(this);
				}
				this._Log.Entity = value;
				if ((value != null))
				{
					value.Answer123s.Add(this);
					this._LId = value.LID;
				}
				else
				{
					this._LId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Log");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer123", Storage="_Question", ThisKey="QId", OtherKey="QId", IsForeignKey=true)]
	public Question Question
	{
		get
		{
			return this._Question.Entity;
		}
		set
		{
			Question previousValue = this._Question.Entity;
			if (((previousValue != value) 
						|| (this._Question.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Question.Entity = null;
					previousValue.Answer123s.Remove(this);
				}
				this._Question.Entity = value;
				if ((value != null))
				{
					value.Answer123s.Add(this);
					this._QId = value.QId;
				}
				else
				{
					this._QId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Question");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _LID;
	
	private string _Name;
	
	private string _Email;
	
	private string _Password;
	
	private EntitySet<Answer123> _Answer123s;
	
	private EntitySet<Question> _Questions;
	
	private EntitySet<UpVote> _UpVotes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLIDChanging(int value);
    partial void OnLIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
	
	public Log()
	{
		this._Answer123s = new EntitySet<Answer123>(new Action<Answer123>(this.attach_Answer123s), new Action<Answer123>(this.detach_Answer123s));
		this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
		this._UpVotes = new EntitySet<UpVote>(new Action<UpVote>(this.attach_UpVotes), new Action<UpVote>(this.detach_UpVotes));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int LID
	{
		get
		{
			return this._LID;
		}
		set
		{
			if ((this._LID != value))
			{
				this.OnLIDChanging(value);
				this.SendPropertyChanging();
				this._LID = value;
				this.SendPropertyChanged("LID");
				this.OnLIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_Answer123", Storage="_Answer123s", ThisKey="LID", OtherKey="LId")]
	public EntitySet<Answer123> Answer123s
	{
		get
		{
			return this._Answer123s;
		}
		set
		{
			this._Answer123s.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_Question", Storage="_Questions", ThisKey="LID", OtherKey="LId")]
	public EntitySet<Question> Questions
	{
		get
		{
			return this._Questions;
		}
		set
		{
			this._Questions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_UpVote", Storage="_UpVotes", ThisKey="LID", OtherKey="LId")]
	public EntitySet<UpVote> UpVotes
	{
		get
		{
			return this._UpVotes;
		}
		set
		{
			this._UpVotes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Answer123s(Answer123 entity)
	{
		this.SendPropertyChanging();
		entity.Log = this;
	}
	
	private void detach_Answer123s(Answer123 entity)
	{
		this.SendPropertyChanging();
		entity.Log = null;
	}
	
	private void attach_Questions(Question entity)
	{
		this.SendPropertyChanging();
		entity.Log = this;
	}
	
	private void detach_Questions(Question entity)
	{
		this.SendPropertyChanging();
		entity.Log = null;
	}
	
	private void attach_UpVotes(UpVote entity)
	{
		this.SendPropertyChanging();
		entity.Log = this;
	}
	
	private void detach_UpVotes(UpVote entity)
	{
		this.SendPropertyChanging();
		entity.Log = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _QId;
	
	private string _Questions;
	
	private System.Nullable<int> _LId;
	
	private string _Category;
	
	private EntitySet<Answer123> _Answer123s;
	
	private EntitySet<UpVote> _UpVotes;
	
	private EntityRef<Log> _Log;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQIdChanging(int value);
    partial void OnQIdChanged();
    partial void OnQuestionsChanging(string value);
    partial void OnQuestionsChanged();
    partial void OnLIdChanging(System.Nullable<int> value);
    partial void OnLIdChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
	
	public Question()
	{
		this._Answer123s = new EntitySet<Answer123>(new Action<Answer123>(this.attach_Answer123s), new Action<Answer123>(this.detach_Answer123s));
		this._UpVotes = new EntitySet<UpVote>(new Action<UpVote>(this.attach_UpVotes), new Action<UpVote>(this.detach_UpVotes));
		this._Log = default(EntityRef<Log>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int QId
	{
		get
		{
			return this._QId;
		}
		set
		{
			if ((this._QId != value))
			{
				this.OnQIdChanging(value);
				this.SendPropertyChanging();
				this._QId = value;
				this.SendPropertyChanged("QId");
				this.OnQIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Questions", DbType="VarChar(100)")]
	public string Questions
	{
		get
		{
			return this._Questions;
		}
		set
		{
			if ((this._Questions != value))
			{
				this.OnQuestionsChanging(value);
				this.SendPropertyChanging();
				this._Questions = value;
				this.SendPropertyChanged("Questions");
				this.OnQuestionsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LId", DbType="Int")]
	public System.Nullable<int> LId
	{
		get
		{
			return this._LId;
		}
		set
		{
			if ((this._LId != value))
			{
				if (this._Log.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLIdChanging(value);
				this.SendPropertyChanging();
				this._LId = value;
				this.SendPropertyChanged("LId");
				this.OnLIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(50)")]
	public string Category
	{
		get
		{
			return this._Category;
		}
		set
		{
			if ((this._Category != value))
			{
				this.OnCategoryChanging(value);
				this.SendPropertyChanging();
				this._Category = value;
				this.SendPropertyChanged("Category");
				this.OnCategoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer123", Storage="_Answer123s", ThisKey="QId", OtherKey="QId")]
	public EntitySet<Answer123> Answer123s
	{
		get
		{
			return this._Answer123s;
		}
		set
		{
			this._Answer123s.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_UpVote", Storage="_UpVotes", ThisKey="QId", OtherKey="QId")]
	public EntitySet<UpVote> UpVotes
	{
		get
		{
			return this._UpVotes;
		}
		set
		{
			this._UpVotes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_Question", Storage="_Log", ThisKey="LId", OtherKey="LID", IsForeignKey=true)]
	public Log Log
	{
		get
		{
			return this._Log.Entity;
		}
		set
		{
			Log previousValue = this._Log.Entity;
			if (((previousValue != value) 
						|| (this._Log.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Log.Entity = null;
					previousValue.Questions.Remove(this);
				}
				this._Log.Entity = value;
				if ((value != null))
				{
					value.Questions.Add(this);
					this._LId = value.LID;
				}
				else
				{
					this._LId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Log");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Answer123s(Answer123 entity)
	{
		this.SendPropertyChanging();
		entity.Question = this;
	}
	
	private void detach_Answer123s(Answer123 entity)
	{
		this.SendPropertyChanging();
		entity.Question = null;
	}
	
	private void attach_UpVotes(UpVote entity)
	{
		this.SendPropertyChanging();
		entity.Question = this;
	}
	
	private void detach_UpVotes(UpVote entity)
	{
		this.SendPropertyChanging();
		entity.Question = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UpVote")]
public partial class UpVote : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _VId;
	
	private System.Nullable<int> _UpVote1;
	
	private int _QId;
	
	private int _LId;
	
	private EntityRef<Log> _Log;
	
	private EntityRef<Question> _Question;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVIdChanging(int value);
    partial void OnVIdChanged();
    partial void OnUpVote1Changing(System.Nullable<int> value);
    partial void OnUpVote1Changed();
    partial void OnQIdChanging(int value);
    partial void OnQIdChanged();
    partial void OnLIdChanging(int value);
    partial void OnLIdChanged();
    #endregion
	
	public UpVote()
	{
		this._Log = default(EntityRef<Log>);
		this._Question = default(EntityRef<Question>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int VId
	{
		get
		{
			return this._VId;
		}
		set
		{
			if ((this._VId != value))
			{
				this.OnVIdChanging(value);
				this.SendPropertyChanging();
				this._VId = value;
				this.SendPropertyChanged("VId");
				this.OnVIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="UpVote", Storage="_UpVote1", DbType="Int")]
	public System.Nullable<int> UpVote1
	{
		get
		{
			return this._UpVote1;
		}
		set
		{
			if ((this._UpVote1 != value))
			{
				this.OnUpVote1Changing(value);
				this.SendPropertyChanging();
				this._UpVote1 = value;
				this.SendPropertyChanged("UpVote1");
				this.OnUpVote1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QId", DbType="Int NOT NULL")]
	public int QId
	{
		get
		{
			return this._QId;
		}
		set
		{
			if ((this._QId != value))
			{
				if (this._Question.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnQIdChanging(value);
				this.SendPropertyChanging();
				this._QId = value;
				this.SendPropertyChanged("QId");
				this.OnQIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LId", DbType="Int NOT NULL")]
	public int LId
	{
		get
		{
			return this._LId;
		}
		set
		{
			if ((this._LId != value))
			{
				if (this._Log.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLIdChanging(value);
				this.SendPropertyChanging();
				this._LId = value;
				this.SendPropertyChanged("LId");
				this.OnLIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_UpVote", Storage="_Log", ThisKey="LId", OtherKey="LID", IsForeignKey=true)]
	public Log Log
	{
		get
		{
			return this._Log.Entity;
		}
		set
		{
			Log previousValue = this._Log.Entity;
			if (((previousValue != value) 
						|| (this._Log.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Log.Entity = null;
					previousValue.UpVotes.Remove(this);
				}
				this._Log.Entity = value;
				if ((value != null))
				{
					value.UpVotes.Add(this);
					this._LId = value.LID;
				}
				else
				{
					this._LId = default(int);
				}
				this.SendPropertyChanged("Log");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_UpVote", Storage="_Question", ThisKey="QId", OtherKey="QId", IsForeignKey=true)]
	public Question Question
	{
		get
		{
			return this._Question.Entity;
		}
		set
		{
			Question previousValue = this._Question.Entity;
			if (((previousValue != value) 
						|| (this._Question.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Question.Entity = null;
					previousValue.UpVotes.Remove(this);
				}
				this._Question.Entity = value;
				if ((value != null))
				{
					value.UpVotes.Add(this);
					this._QId = value.QId;
				}
				else
				{
					this._QId = default(int);
				}
				this.SendPropertyChanged("Question");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
